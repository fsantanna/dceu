package xceu

import dceu.*
import ceu.lexer
import ceu.trap
import org.junit.Ignore
import org.junit.Test

class TXParser {
    // TUPLE / INDEX

    @Test
    fun index1() {
        N = 1
        val l = lexer("x.1")
        val parser = Parser(l)
        val e = parser.expr()
        assert(e.tostr() == "x[1]") { e.tostr() }
    }
    @Test
    fun index2() {
        val l = lexer("x . a")
        val parser = Parser(l)
        val e = parser.expr()
        assert(e is Expr.Index && e.col is Expr.Acc && e.idx is Expr.Tag)
        assert(e.tostr() == "x[:a]") { e.tostr() }
    }
    @Test
    fun index3_err() {
        val l = lexer("x . .")
        val parser = Parser(l)
        assert(trap { parser.expr_4_suf() } == "anon : (lin 1, col 5) : expected field : have \".\"")
    }

    // METHOD

    @Test
    fun jj_01_method_err() {
        val out = ceu.all("""
            10->10
        """)
        assert(out == "anon : (lin 2, col 17) : call error : expected function\n:error\n") { out }
    }

    // POLY
    /*
    @Test
    fun gg_05_poly() {
        val l = lexer("poly func f () {}")
        val parser = Parser(l)
        assert(trap { parser.expr() } == "anon : (lin 1, col 6) : poly error : expected declaration")
    }
    */
}
