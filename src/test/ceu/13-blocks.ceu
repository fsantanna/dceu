do {                    ;; block prints :ok and evals to 1
    println(:ok)
    1
}

do {
    val a = 1           ;; `a` is only visible in the block
    ;;<...>
}
;;a                       ;; ERR: `a` is out of scope

do {
    task T () {}
    spawn T()           ;; spawns task T and attaches it to the block
    ;;<...>
}                       ;; aborts spawned task

do {
    drop(#[1,2,3])      ;; OK
}
println(`:ceu ceu_acc`)

val v = 10
drop(v)             ;; --> 10 (innocuous drop)

val u = do {
    val t = [10]
    drop(t)         ;; --> [10] (deattaches from `t`, reattaches to `u`)
}
println(u)
