;; is', is-not'

func to-bool (v) {
    not (not v)
}

func is' (v1,v2) {
    ifs {
        (v1 == v2)         => true
        (type(v2) /= :tag) => false
        (type(v1) == v2)   => true
        tags(v1,v2)        => true
        else => false
    }
}

func is-not' (v1,v2) {
    not is'(v1,v2)
}

;; ARITHMETIC

;;export [{{+}}, {{-}}, {{*}}, {{**}}, {{/}}, {{//}}, {{%}}]
;;{
    func {{+}} (v1, v2) {
        if (v1 is-not? :number) or (v2 is-not? :number) {
            throw(:error)
        }
        `:number ($v1.Number + $v2.Number)`
    }

    func {{-}} (v1, v2) {
        ifs {
            (v1 is? :number) and (v2 is? :nil)           => `:number (- $v1.Number)`
            (v1 is-not? :number) or (v2 is-not? :number) => throw(:error)
            else                                         => `:number ($v1.Number - $v2.Number)`
        }
    }

    func {{*}} (v1, v2) {
        if (v1 is-not? :number) or (v2 is-not? :number) {
            throw(:error)
        }
        `:number ($v1.Number * $v2.Number)`
    }

    func {{**}} (v1, v2) {
        if (v1 is-not? :number) or (v2 is-not? :number) {
            throw(:error)
        }
        `:number powf($v1.Number, $v2.Number)`
    }

    func {{/}} (v1, v2) {
        if (v1 is-not? :number) or (v2 is-not? :number) {
            throw(:error)
        }
        `:number ($v1.Number / $v2.Number)`
    }

    func {{//}} (v1, v2) {
        if (v1 is-not? :number) or (v2 is-not? :number) {
            throw(:error)
        }
        `:number powf($v1.Number, 1/$v2.Number)`
    }

    func {{%}} (v1, v2) {
        if (v1 is-not? :number) or (v2 is-not? :number) {
            throw(:error)
        }
        `:number fmod($v1.Number, $v2.Number)`
    }
;;}

;; RELATIONAL:  >=  >  <=  <

;;export [{{>}}, {{<}}, {{>=}}, {{<=}}] {
    func {{>}} (v1,v2) {
        ifs {
            (v1 is? :tag)    and (v2 is? :tag)    => `:bool ($v1.Tag    > $v2.Tag)`
            (v1 is? :number) and (v2 is? :number) => `:bool ($v1.Number > $v2.Number)`
            else => throw(:error)
        }
    }

    func {{<}} (v1,v2) {
        not ((v1 == v2) or (v1 > v2))
    }

    func {{>=}} (v1,v2) {
        (v1 == v2) or (v1 > v2)
    }

    func {{<=}} (v1,v2) {
        (v1 == v2) or (v1 < v2)
    }
;;}

;; ASSERT

func assert (v, msg) {
    if not v {
        print("assertion error : ")
        println(msg or "no reason given")
        throw(:assert)
    }
}

;; TAG-OR

func tag-or (t1,t2) {
    assert(type(t1) == :tag)
    assert(type(t2) == :tag)
    `:tag $t1.Tag | $t2.Tag`
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MIN, MAX, BETWEEN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

func min (v1, v2) {
    ((v1 < v2) and v1) or v2
}

func max (v1, v2) {
    ((v1 > v2) and v1) or v2
}

func between (min_max, v) {
    max(min_max.0, min(min_max.1, v))
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ITERATORS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

data :Iterator = [f,s,tp,i]

;;export [iter] {
    func iter-tuple (itr :Iterator) {
        val i = itr.i
        if i >= #itr.s {
            nil
        } else {
            set itr.i = i + 1
            val v = itr.s[i]
            ifs itr.tp {
                == :all => [i, v]
                == :idx => i
                == :val => v
                else    => v
            }
        }
    }

    func iter-dict (itr :Iterator) {
        val k = next-dict(itr.s,itr.i)
        if k == nil {
            nil
        } else {
            set itr.i = k
            val v = itr.s[k]
            ifs itr.tp {
                == :all => [k, v]
                == :key => k
                == :val => v
                else    => k
            }
        }
    }

    func iter-xcoro (itr :Iterator) {
        val co = itr.s
        resume co() --> \{
            if (status(co) == :terminated)
                => nil
                => it
        }
    }

    func iter-coro (itr :Iterator) {
        set itr.s = coroutine(itr.s)
        set itr.f = iter-xcoro
        itr.f(itr)
    }

    func iter (v, tp) {
        ifs v {
            is? :Iterator => v
            is? :tuple    => :Iterator [iter-tuple, v, tp, 0]
            is? :vector   => :Iterator [iter-tuple, v, tp, 0]
            is? :dict     => :Iterator [iter-dict,  v, tp, nil]
            is? :func     => :Iterator [v]
            is? :coro     => :Iterator [iter-coro, v]
            is? :x-coro   => :Iterator [iter-xcoro, v]
        }
    }
;;}

func next (v, ...) {
    ifs v {
        is? :x-coro   => resume v(...)
        is? :dict     => next-dict(v, ...)
        is? :Iterator => v.0(v)
        else          => throw(:error)
    }
}

;; IN, IN-NOT, DEEP-EQUALS === =/=

func in' (v, xs) {
    loop x in iter(xs) {
       until (x == v)
    }
}

func in-not' (v, xs) {
    not in'(v,xs)
}

func :rec {{===}} (v1,v2) {
    val t1 = type(v1)
    val t2 = type(v2)
    ifs {
        v1 == v2 => true
        t1 /= t2 => false
        (t1==:tuple) or (t1==:vector) => equals-tuple-vector(v1,v2)
        t1 == :dict => contains-dict?(v1,v2) and contains-dict?(v2,v1)
        else => false
    } where {
        func equals-tuple-vector (v1, v2) {
            (#v1 == #v2) and not (
                loop x in iter(v1,:all) {
                    while (v2[x.0] === x.1)
                }
            )
        }
        func contains-dict? (v1, v2) {
            not (
                loop x in iter(v1,:all) {
                    while (v2[x.0] === x.1)
                }
            )
        }
     }
}

func :rec {{=/=}} (v1,v2) {
    not (v1 === v2)
}

;; COPY

func :rec copy (v) {
    ifs type(v) {
        :tuple {
            val ret = tuple(#v)
            var i=0
            loop {
                until i == #v
                set ret[i] = copy(v[i])
                set i = i + 1
            }
            drop(ret)
        }
        else {
            throw(:TODO)
        }
    }
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TO-*
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

func string? (v) {
    ((v is? :vector) and (#v > 0)) and (v[0] is? :char)
}

func c-to-string (v) {
    assert(type(v) == :pointer)
    val str = #[]
    loop i in {0 => `:number strlen($v.Pointer)`{ {
        set str[+] = `:char ((char*)$v.Pointer)[(int)$i.Number]`
    }
    drop(str)
}

func :rec to-string (v) {
    ifs v {
        is? :nil => "nil"
        is? :pointer => c-to-string(v)
        is? :tag => c-to-string(`:pointer ceu_tag_to_string($v.Tag)`)
        is? :char => #[v]
        is? :number => do {
            ```
            static char str[255];
            snprintf(str, 255, "%g", $v.Number);
            ```
            to-string(`:pointer str`)
        }
        else => v   ;; TODO
    }
}

func to-number (v) {
    ifs v {
        is? :tag    => `:number $v.Tag`
        is? :char   => `:number $v.Char`
        {{string?}} => `:number atoi($v.Dyn->Vector.buf)`
        else        => v   ;; TODO
    }
}

func to-char (v) {
    ifs v {
        is? :number => `:char $v.Number`
        else => v   ;; TODO
    }
}

func to-tag (v) {
    ifs v {
        {{string?}} => string-to-tag(v)
        else        => v   ;; TODO
    }
}

func to-vector (col, tp) {
    val ret = #[]
    loop v in iter(col,tp) {
        set ret[+] = copy(v)
    }
    drop(ret)
}

func to-tracks (...) {
    val ret = #[]
    val args = ...
    loop v in iter(args) {
        ifs v {
            is? :x-task {
                set ret[+] = track(v)
            }
            is? :x-tasks {
                loop i in v {
                    set ret[+] = drop(i)
                }
            }
        }
    }
    drop(ret)
}

func iterable-to-dict (itr) {
    val dict = @[]
    loop in iter(itr) {
        set dict[it] = true
    }
    drop(dict)
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CONCAT:  <++  ++
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

func {{<++}} (v1, v2) {
    assert(type(v1) == :vector)
    assert(type(v2) == :vector)
    do {
        loop i in {0 => #v2{ {
            set v1[+] = v2[i]
        }
    }
    v1
}

func {{++}} (v1, v2) {
    (#[] <++ v1) <++ v2
}

;; composition

func {{<|<}} (^f,^g) {
    func (v) {
        ^^f(^^g(v))
    }
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; RANDOM:  random-seed  random-next
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

func random-seed (n) {
    if n {
        `srand($n.Number);`
    } else {
        `srand(time(NULL));`
    }
}

func random-next () {
    `:number rand()`
}

func math-sin (v) {
    `:number sin($v.Number)`
}

func math-cos (v) {
    `:number cos($v.Number)`
}

func math-floor (v) {
    `:number floor($v.Number)`
}
