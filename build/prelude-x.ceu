data :Clock = [ms]

func debug (v) {
    println(v)
    v
}

;; ARITHMETIC

;;export [{{+}}, {{-}}, {{*}}, {{**}}, {{/}}, {{//}}, {{%}}]
;;{
    func {{+}} (v1, v2) {
        if (type(v1) /= :number) or (type(v2) /= :number) {
            error(:error)
        }
        `:number ($v1.Number + $v2.Number)`
    }

    func {{-}} (v1, v2) {
        ifs {
            (type(v1) == :number) and (v2 == nil)          => `:number (- $v1.Number)`
            (type(v1) /= :number) or  (type(v2) /= :number) => error(:error)
            else                                            => `:number ($v1.Number - $v2.Number)`
        }
    }

    func {{*}} (v1, v2) {
        if (type(v1) /= :number) or (type(v2) /= :number) {
            error(:error)
        }
        `:number ($v1.Number * $v2.Number)`
    }

    func {{**}} (v1, v2) {
        if (type(v1) /= :number) or (type(v2) /= :number) {
            error(:error)
        }
        `:number powf($v1.Number, $v2.Number)`
    }

    func {{/}} (v1, v2) {
        if (type(v1) /= :number) or (type(v2) /= :number) {
            error(:error)
        }
        `:number ($v1.Number / $v2.Number)`
    }

    func {{//}} (v1, v2) {
        if (type(v1) /= :number) or (type(v2) /= :number) {
            error(:error)
        }
        `:number powf($v1.Number, 1/$v2.Number)`
    }

    func {{%}} (v1, v2) {
        if (type(v1) /= :number) or (type(v2) /= :number) {
            error(:error)
        }
        `:number fmod($v1.Number, $v2.Number)`
    }
;;}

;; RELATIONAL:  >=  >  <=  <

;;export [{{>}}, {{<}}, {{>=}}, {{<=}}] {
    func {{>}} (v1,v2) {
        ifs {
            (type(v1) == :tag)    and (type(v2) == :tag)    => `:bool ($v1.Tag    > $v2.Tag)`
            (type(v1) == :number) and (type(v2) == :number) => `:bool ($v1.Number > $v2.Number)`
            else => error(:error)
        }
    }

    func {{<}} (v1,v2) {
        not ((v1 == v2) or (v1 > v2))
    }

    func {{>=}} (v1,v2) {
        (v1 == v2) or (v1 > v2)
    }

    func {{<=}} (v1,v2) {
        (v1 == v2) or (v1 < v2)
    }
;;}

;; ASSERT

func string? (v) {
    ((type(v)==:vector) and (#v>0)) and (type(v[0])==:char)
}

func assert (v, msg) {
    ifs {
        v => v
        msg->string? {
            print("assertion error : ")
            println(msg)
            error(:assert)
        }
        type(msg) == :func {
            error(msg())
        }
        else => error(msg)
    }
}

;; TAG-OR

func tag-or (t1,t2) {
    assert(type(t1) == :tag)
    assert(type(t2) == :tag)
    `:tag $t1.Tag | $t2.Tag`
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MIN, MAX, BETWEEN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

func min (v1, v2) {
    ((v1 < v2) and v1) or v2
}

func max (v1, v2) {
    ((v1 > v2) and v1) or v2
}

func between (min_max, v) {
    max(min_max[0], min(min_max[1], v))
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ITERATORS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

data :Iterator = [f,s,tp,i]

;;export [iter] {
    func iter-tuple (itr :Iterator) {
        val i = itr.i
        if i >= #itr.s {
            nil
        } else {
            set itr.i = i + 1
            (i, itr.s[i])
        }
    }

    func iter-dict (itr :Iterator) {
        val k = next-dict(itr.s,itr.i)
        if k == nil {
            nil
        } else {
            set itr.i = k
            (k, itr.s[k])
        }
    }

    func iter-xcoro (itr :Iterator) {
        val co = itr.s
        (resume co()) --> func (...) {
            if (status(co) == :terminated)
                => nil
                => (...)
        }
    }

    func iter-coro (itr :Iterator) {
        set itr.s = coroutine(itr.s)
        set itr.f = iter-xcoro
        itr.f(itr)
    }

    func iter-tasks (itr :Iterator) {
        ;;error(:TODO)
        set itr.i = next-tasks(itr.s,itr.i)
        itr.i
    }

    func to-iter (v, tp) {
        match type(v) {
            ,sup?(:Iterator, tag(v)) => v
            ==:tuple    => :Iterator [iter-tuple, v, tp, 0]
            ==:vector   => :Iterator [iter-tuple, v, tp, 0]
            ==:dict     => :Iterator [iter-dict,  v, tp, nil]
            ==:func     => :Iterator [v]
            ==:coro     => :Iterator [iter-coro, v]
            ==:exe-coro => :Iterator [iter-xcoro, v]
            ==:tasks    => :Iterator [iter-tasks, v, nil, nil]
            else        => nil
        }
    }
;;}

;; IS, IS-NOT, === =/=
;; IN, IN-NOT

func {{===}} (v1,v2) {
    val t1 = type(v1)
    val t2 = type(v2)
    ifs {
        v1 == v2 => true
        t1 /= t2 => false
        (t1==:tuple) or (t1==:vector) => equals-tuple-vector(v1,v2)
        t1 == :dict => contains-dict?(v1,v2) and contains-dict?(v2,v1)
        else => false
    } where {
        func equals-tuple-vector (v1', v2') {
            (#v1' == #v2') and not (
                loop x in to-iter(v1',:all) {
                    while (v2'[x[0]] === x[1])
                }
            )
        }
        func contains-dict? (v1', v2') {
            not (
                loop x in to-iter(v1',:all) {
                    while (v2'[x[0]] === x[1])
                }
            )
        }
     }
}

func {{=/=}} (v1,v2) {
    not (v1 === v2)
}

func is' (v1,v2) {
    ifs {
        (v1 === v2)        => true
        (type(v1) == v2)   => true
        (type(v2) == :tag) => sup?(v2, tag(v1))
        else => false
    }
}

func is-not' (v1,v2) {
    not is'(v1,v2)
}

func in' (v, xs) {
    if (type(xs) == :dict) and xs[v] { ,it =>
        it
    } else {
        loop (a,b) in to-iter(xs) {
            ;;println(v, type(xs), [a,b], v===b)
            val z = match xs {
                :dict   => (v === a) and b
                :tuple  => (v === b) and b
                :vector => (v === b) and b
                else    => (v === a) and a
            }
            println(:z, z)
            until z
        }
    }
}

func in-not' (v, xs) {
    not in'(v,xs)
}

func next (v, ...) {
    match v {
        :exe-coro => resume v(...)
        :tasks    => next-tasks(v, ...)
        :dict     => next-dict(v, ...)
        :Iterator => it.f(v)
        else      => error(:error)
    }
}

func create-resume (CO, ...) {
    val co = coroutine(CO)
    assert(resume co(...) == nil)
    co
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TO-*
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

func to-string (v) {
    match v {
        {{string?}} => v
        :nil        => "nil"
        :tag        => to-string-tag(v)
        :number     => to-string-number(v)
        :char       => #[v]
        :pointer    => to-string-pointer(v)
        else        => nil
    }
}

func to-bool (v) {
    not (not v)
}

func to-char (v) {
    match v {
        :char   => v
        :number => `:char $v.Number`
        {{string?}} {
            ifs {
                (#v == 1) => v[0]
                (#v /= 2) => nil
                (v[0] /= '\\') => nil
                else {
                    val t = @[
                        ("\\a", '\a'),
                        ("\\b", '\b'),
                        ("\\f", '\f'),
                        ("\\n", '\n'),
                        ("\\r", '\r'),
                        ("\\t", '\t'),
                        ("\\v", '\v'),
                        ("\\'", '\''),
                        ("\\\"", '\"'),
                        ("\\?", '\?'),
                        ("\\\\", '\\'),
                    ]
                    v in? t
                }
            }
        }
        else => nil
    }
}

func to-number (v) {
    match v {
        :tag        => `:number $v.Tag`
        :char       => `:number $v.Char`
        {{string?}} => `:number atoi($v.Dyn->Vector.buf)`
        else        => nil
    }
}

func to-tag (v) {
    match v {
        :tag        => v
        {{string?}} => to-tag-string(v)
        else        => nil
    }
}

func to-pointer (v) {
    match v {
        :pointer => v
        :tag     => `:pointer ceu_to_dash_string_dash_tag($v.Tag)`
        :tuple   => `:pointer $v.Dyn->Tuple.buf`
        :vector  => `:pointer $v.Dyn->Vector.buf`
        :dict    => `:pointer $v.Dyn->Dict.buf`
        else     => nil
    }
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TYPE-*
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

func type-static? (v) {
    to-number(v) < `:number CEU_VALUE_DYNAMIC`
}
func type-dynamic? (v) {
    to-number(v) > `:number CEU_VALUE_DYNAMIC`
}

;; COPY

func copy (v) {
    match type(v) {
        {{type-static?}} {
            v
        }
        :tuple {
            val ret = tuple(#v)
            loop i in {0 => #v{ {
                set ret[i] = copy(v[i])
            }
            ret
        }
        :vector {
            val ret = #[]
            loop i in {0 => #v{ {
                set ret[i] = copy(v[i])
            }
            ret
        }
        :dict {
            val ret = @[]
            var k = nil
            loop {
                set k = next-dict(v, k)
                until (k == nil)
                set ret[copy(k)] = copy(v[k])
            }
            ret
        }
        else {
            error(:TODO)
        }
    }
}

func to-vector (col, tp) {
    val ret = #[]
    loop v in to-iter(col,tp) {
        set ret[+] = v
    }
    ret
}

;;;
func to-tasks (...) {
    val ret = #[]
    val args = ...
    loop v in to-iter(args) {
        match v {
            :exe-task {
                set ret[+] = v
            }
            :tasks {
                loop i in v {
                    set ret[+] = i
                }
            }
        }
    }
    ret
}
;;;

func to-set (col) {
    val ret = @[]
    loop in to-iter(col) {
        set ret[it] = true
    }
    ret
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CONCAT:  <++  ++
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

func {{<++}} (v1, v2) {
    assert(type(v1) == :vector)
    assert(type(v2) == :vector)
    do {
        loop i in {0 => #v2{ {
            set v1[+] = v2[i]
        }
    }
    v1
}

func {{++}} (v1, v2) {
    (#[] <++ v1) <++ v2
}

;; composition

func {{<|<}} (f,g) {
    func (v) {
        f(g(v))
    }
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; RANDOM:  random-seed  random-next
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

func random-seed (n) {
    if n {
        `srand($n.Number);`
    } else {
        `srand(time(NULL));`
    }
}

func random-next () {
    `:number rand()`
}

func math-sin (v) {
    `:number sin($v.Number)`
}

func math-cos (v) {
    `:number cos($v.Number)`
}

func math-floor (v) {
    `:number floor($v.Number)`
}
