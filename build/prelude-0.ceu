;; is', is-not'

val not = func (v) {
    if v {
        v
    } else {
        false
    }
}

val is? = func (v1,v2) {
    if (v1 == v2) {
        true
    } else {
        if (type(v2) /= :tag) {
            false
        } else {
            if (type(v1) == v2) {
                true
            } else {
                if tags(v1,v2) {
                    true
                } else {
                    false
                }
            }
        }
    }
}

val is-not? = func (v1,v2) {
    not (is?(v1,v2))
}

;; LOGICAL

val {{&&}} = func (v1, v2) {
    if v1 {
        v2
    } else {
        false
    }
}

val {{||}} = func (v1, v2) {
    if v1 {
        true
    } else {
        v2
    }
}

;; ARITHMETIC

val {{+}} = func (v1, v2) {
    if (type(v1) /= :number) || (type(v2) /= :number) {
        error(:error)
    } else {
        `:number ($v1.Number + $v2.Number)`
    }
}

val {{-}} = func (v1, v2) {
    val t1 = type(v1)
    val t2 = type(v2)
    if (t1 == :number) && (t2 == :nil) {
        `:number (- $v1.Number)`
    } else {
        if (t1 /= :number) || (t2 /= :number) {
            error(:error)
        } else {
            `:number ($v1.Number - $v2.Number)`
        }
    }
}

val {{*}} = func (v1, v2) {
    if (type(v1) /= :number) || (type(v2) /= :number) {
        error(:error)
    } else {
        `:number ($v1.Number * $v2.Number)`
    }
}

val {{**}} = func (v1, v2) {
    if (type(v1) /= :number) || (type(v2) /= :number) {
        error(:error)
    } else {
        `:number powf($v1.Number, $v2.Number)`
    }
}

val {{/}} = func (v1, v2) {
    if (type(v1) /= :number) || (type(v2) /= :number) {
        error(:error)
    } else {
        `:number ($v1.Number / $v2.Number)`
    }
}

val {{//}} = func (v1, v2) {
    if (type(v1) /= :number) || (type(v2) /= :number) {
        error(:error)
    } else {
        `:number powf($v1.Number, 1/$v2.Number)`
    }
}

val {{%}} = func (v1, v2) {
    if (type(v1) /= :number) || (type(v2) /= :number) {
        error(:error)
    } else {
        `:number fmod($v1.Number, $v2.Number)`
    }
}

;; RELATIONAL

val {{>=}} = func (v1,v2) {
    val t1 = type(v1)
    if (t1 /= type(v2)) || (t1 /= :number) {
        error(:error)
    } else {
        `:bool ($v1.Number >= $v2.Number)`
    }
}

val {{>}} = func (v1,v2) {
    val t1 = type(v1)
    if (t1 /= type(v2)) || (t1 /= :number) {
        error(:error)
    } else {
        `:bool ($v1.Number > $v2.Number)`
    }
}

val {{<=}} = func (v1,v2) {
    val t1 = type(v1)
    if (t1 /= type(v2)) || (t1 /= :number) {
        error(:error)
    } else {
        `:bool ($v1.Number <= $v2.Number)`
    }
}

val {{<}} = func (v1,v2) {
    val t1 = type(v1)
    if (t1 /= type(v2)) || (t1 /= :number) {
        error(:error)
    } else {
        `:bool ($v1.Number < $v2.Number)`
    }
}

;; TO-*

val to-string = func (v) {
    if type(v) == :pointer {
        var i = 0
        val n = `:number strlen($v.Pointer)`
        var str = #[]
        loop {
            break if (i == n)
            set str[#str] = `:char ((char*)$v.Pointer)[(int)$i.Number]`
            set i = i + 1
        }
        ;;;drop;;;(str)
    } else {
        if type(v) == :number {
            ```
            static char str[255];
            snprintf(str, 255, "%g", $v.Number);
            ```
            to-string(`:pointer str`)
        } else {
            v   ;; TODO
        }
    }
}

val to-number = func (v) {
    if type(v) == :tag {
        `:number $v.Tag`
    } else {
        if type(v) == :vector {
            if #v > 0 {
                if type(v[0]) == :char {
                    `:number atoi($v.Dyn->Vector.buf)`
                } else {
                    v   ;; TODO
                }
            } else {
                v       ;; TODO
            }
        } else {
            v           ;; TODO
        }
    }
}

val to-tag = func (v) {
    if type(v) == :string {
        string-to-tag(v)
    } else {
        v   ;; TODO
    }
}

;; TYPE-*

val type-static? = func (v) {
    to-number(v) < `:number CEU_VALUE_DYNAMIC`
}
val type-dynamic? = func (v) {
    to-number(v) > `:number CEU_VALUE_DYNAMIC`
}

;; COPY

val copy = func (v) {
    if type-static?(type(v)) {
        v
    } else {
        if type(v) == :tuple {
            val ret = tuple(#v)
            var i=0
            loop {
                break if i == #v
                set ret[i] = copy(v[i])
                set i = i + 1
            }
            ;;;drop;;;(ret)
        } else {
            error("TODO")
        }
    }
}

;; DETRACK

;;;
val detrack'' = func (trk) {
    if detrack'(trk) {
        true
    } else {
        false
    }
}
;;;

;; AWAIT
;;;
val await = func (e) {
    loop {
        break if yield(nil) { as it =>
            if type(e) == :func {
                e(it)
            } else {
                is?(e, it)
            }
        }
    }
}
;;;