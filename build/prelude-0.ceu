;; is', is-not'

val not = func' (v) {
    if v {
        v
    } else {
        false
    }
}

val is? = func' (v1,v2) {
    if (v1 == v2) {
        true
    } else {
        if (type(v1) == v2) {
            true
        } else {
            if (type(v2) == :tag) {
                sup?(v2, tag(v1))
            } else {
                false
            }
        }
    }
}

val is-not? = func' (v1,v2) {
    not (is?(v1,v2))
}

;; LOGICAL

val {{&&}} = func' (v1, v2) {
    if v1 {
        v2
    } else {
        false
    }
}

val {{||}} = func' (v1, v2) {
    if v1 {
        true
    } else {
        v2
    }
}

;; ARITHMETIC

val {{+}} = func' (v1, v2) {
    if (type(v1) == :number) && (type(v2) == :number) {
        `:number ($v1.Number + $v2.Number)`
    } else {
        if (type(v1) == :tag) && (type(v2) == :number) {
            `:tag ($v1.Tag + $v2.Number)`
        } else {
            if (type(v1) == :number) && (type(v2) == :tag) {
                `:tag ($v1.Number + $v2.Tag)`
            } else {
                error(:error)
            }
        }
    }
}

val {{-}} = func' (v1, v2) {
    val t1 = type(v1)
    val t2 = type(v2)
    ;;println(t1,t2)
    if (t1 == :number) && (t2 == :nil) {
        `:number (- $v1.Number)`
    } else {
        if (type(v1) == :number) && (type(v2) == :number) {
            `:number ($v1.Number - $v2.Number)`
        } else {
            if (type(v1) == :tag) && (type(v2) == :number) {
                `:tag ($v1.Tag - $v2.Number)`
            } else {
                if (type(v1) == :number) && (type(v2) == :tag) {
                    `:tag ($v1.Number - $v2.Tag)`
                } else {
                    if (type(v1) == :tag) && (type(v2) == :tag) {
                        `:number ($v1.Tag - $v2.Tag)`
                    } else {
                        error(:error)
                    }
                }
            }
        }
    }
}

val {{*}} = func' (v1, v2) {
    if (type(v1) /= :number) || (type(v2) /= :number) {
        error(:error)
    } else {
        `:number ($v1.Number * $v2.Number)`
    }
}

val {{**}} = func' (v1, v2) {
    if (type(v1) /= :number) || (type(v2) /= :number) {
        error(:error)
    } else {
        `:number powf($v1.Number, $v2.Number)`
    }
}

val {{/}} = func' (v1, v2) {
    if (type(v1) /= :number) || (type(v2) /= :number) {
        error(:error)
    } else {
        `:number ($v1.Number / $v2.Number)`
    }
}

val {{//}} = func' (v1, v2) {
    if (type(v1) /= :number) || (type(v2) /= :number) {
        error(:error)
    } else {
        `:number powf($v1.Number, 1/$v2.Number)`
    }
}

val {{%}} = func' (v1, v2) {
    if (type(v1) /= :number) || (type(v2) /= :number) {
        error(:error)
    } else {
        `:number fmod($v1.Number, $v2.Number)`
    }
}

;; RELATIONAL

val {{>=}} = func' (v1,v2) {
    val t1 = type(v1)
    if (t1 == :number) || (t1 == :number) {
        `:bool ($v1.Number >= $v2.Number)`
    } else {
        if (t1 == :tag) || (t1 == :tag) {
            `:bool ($v1.Tag >= $v2.Tag)`
        } else {
            error(:error)
        }
    }
}

val {{>}} = func' (v1,v2) {
    val t1 = type(v1)
    if (t1 == :number) || (t1 == :number) {
        `:bool ($v1.Number > $v2.Number)`
    } else {
        if (t1 == :tag) || (t1 == :tag) {
            `:bool ($v1.Tag > $v2.Tag)`
        } else {
            error(:error)
        }
    }
}

val {{<=}} = func' (v1,v2) {
    val t1 = type(v1)
    if (t1 == :number) || (t1 == :number) {
        `:bool ($v1.Number <= $v2.Number)`
    } else {
        if (t1 == :tag) || (t1 == :tag) {
            `:bool ($v1.Tag <= $v2.Tag)`
        } else {
            error(:error)
        }
    }
}

val {{<}} = func' (v1,v2) {
    val t1 = type(v1)
    if (t1 == :number) || (t1 == :number) {
        `:bool ($v1.Number < $v2.Number)`
    } else {
        if (t1 == :tag) || (t1 == :tag) {
            `:bool ($v1.Tag < $v2.Tag)`
        } else {
            error(:error)
        }
    }
}

;; TO-*

val to-string = func' (v) {
    if type(v) == :pointer {
        to-string-pointer(v)
    } else {
        if type(v) == :number {
            ```
            static char str[255];
            snprintf(str, 255, "%g", $v.Number);
            ```
            to-string(`:pointer str`)
        } else {
            v   ;; TODO
        }
    }
}

val to-number = func' (v) {
    if type(v) == :tag {
        `:number $v.Tag`
    } else {
        if type(v) == :vector {
            if #v > 0 {
                if type(v[0]) == :char {
                    `:number atoi($v.Dyn->Vector.buf)`
                } else {
                    v   ;; TODO
                }
            } else {
                v       ;; TODO
            }
        } else {
            v           ;; TODO
        }
    }
}

val to-tag = func' (v) {
    if type(v) == :vector {
        if (#v > 0) {
            if (type(v[0]) == :char) {
                to-tag-string(v)
            } else {
                v
            }
        } else {
            v
        }
    } else {
        v   ;; TODO
    }
}

val to-pointer = func' (v) {
    if type(v) == :tag {
        `:pointer ceu_tag_to_pointer($v.Tag)`
    } else {
        if type(v) == :vector {
            `:pointer $v.Dyn->Vector.buf`
        } else {
            v   ;; TODO
        }
    }
}

;; TYPE-*

val type-static? = func' (v) {
    to-number(v) < `:number CEU_VALUE_DYNAMIC`
}
val type-dynamic? = func' (v) {
    to-number(v) > `:number CEU_VALUE_DYNAMIC`
}

;; COPY

var copy

val copy-tuple = func' (dst, src, i) {
    if i == #src {
        dst
    } else {
        set dst[i] = copy(src[i])
        copy-tuple(dst, src, i+1)
    }
}

val copy-dict = func' (dst, src, key) {
    val key' = next-dict(src, key)
    if key' == nil {
        dst
    } else {
        set dst[copy(key')] = copy(src[key'])
        copy-dict(dst, src, key')
    }
}

set copy = func' (v) {
    if type-static?(type(v)) {
        v
    } else {
        if type(v) == :tuple {
            copy-tuple(tuple(#v), v, 0)
        } else {
            if type(v) == :vector {
                copy-tuple(#[], v, 0)
            } else {
                if type(v) == :dict {
                    copy-dict(@[], v, nil)
                } else {
                    error(:TODO)
                }
            }
        }
    }
}

;; DETRACK

;;;
val detrack'' = func' (trk) {
    if detrack'(trk) {
        true
    } else {
        false
    }
}
;;;

;; AWAIT
;;;
val await = func' (e) {
    loop {
        if yield(nil) { as it =>
            if type(e) == :func' {
                e(it)
            } else {
                is?(e, it)
            }
        } {
            error(:TODO)
            ;;break
        } else { nil }
    }
}
;;;