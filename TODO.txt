# TODO

- fazer o mesmo para thus a respeito dos args

- drop exe clo, task, in?
- remover thus await
- detrack de task_in continua com problemas,
  uma vez que pode ser atribuido a var em bloco a que pertence,
  terminar, ser reclamado, e gerar um dangling pointer

- passar em todos os testes
- fazer os testes do pico ceu o quanto antes
    - all, drag, bird-01, bird-11
- bcast inside func

O `thus` atribui um valor de fora diretamente ao `ceu_acc`, como uma nova
variável simples, sem nenhuma verificação. Isso permite que o escopo
interno acesse o valor de fora como uma local temporária.
Esse mecanismo é fundamental em 4 cenários:
    - or, and:
        - não recalcular expressão
    - yield:
    O valor de fora pode vir de um `resume` em um escopo muito aninhado,
    que não sobreviveria a outro acesso que cruze um novo `yield`. Também
    pode vir de um broadcast com a mesma característica. Por essa razão,
    é importante que o corpo do `thus` não tenha `yield`s.
    - detrack:
        - task pode morrer entre yields
    - pub
        - task pode morrer entre yields

- THUS
    - no yields, bcasts, spawns, set outs
    - yield, detrack, pub
- remove ylds
- coro/task accept exact 1 arg in decl resume

- SOBRE valores passados como argumentos para funções e thus:
    - sempre inc, dec
        - chk_set no inicio somente se FLEETING
        - caso contrário, eu sei que é correto, mas poderia falhar no caso de assign paralelo
- SOBRE valores passados como argumentos para broadcast:
    - precisam virar HLD_IMMUT para que não sejam dropados, uma
      vez que são passados para escopos alienigenas
    - são gc_inc/dec para não serem coletados por chks em fcs chamadas

# BUGS

- detrack, scope 999
    - ll_track16_hold_err
- block defer should be after block clean up
- mudei coro,coros,track para hld_type=0, preciso avaliar e testar
- como vou fazer com os holes?
    - o certo seria
        - ao terminar o loop
        - verificar que nao tem outra instancia na pilha
        - fazer o shift left
- checar todos os bcasts e testar se estou morto
    - todo_status5
- globals should be dyns like the others
    - currently they are not dealloc in block end
- copy: tags and upvals

# NEXT

- bcast :global, tasks, enclosing task, enclosing block, specific task
- await, bcast: obligatory parenthesis
- break(e) <-- return expression
- share primitive?
- call: f <- [...], f() <-- [...]
- next => dict-next, iter-next
    - itr->next()
- bcast in block
- val [x,y] = ...
    - pattern matching em geral
- val _ = ... (no decl, no acc)
- where { x=10 } // no val x=10
- export :all [...] { }
- var x :T = y
- set x = y
    - assert(y is :T)
- val x = assert(f() as :number, "xxx")
    - as checks but returns e if successful
- :error -> tag(:error,"message")
- [x,y] = tup (destructor)
- kill task
- polymorphism
    - poly var f = func ({a:X}, {b:Y})
    - poly func f (a:X, b:Y)
    - f({a},{b})
    - set MAX :T = 10
- ~= (like)
    - 1 ~= "1"
    - #x ~= #x.y
    - str ~= ".*"
    - await/awaiting/every :type
- all asserts should become throws w/ tags
- numbers
    +002
    -100
    1_000_010
- test each ceu_bstack case
    - if no catch, create test

# BACK

- power assert
    - pyret check
    group {
        var x = 10
        var y = f(x)
        assert x < z            ;; default/power message
        assert x > y, "error"   ;; custom message
    }
- native
    - `${complex-expr}` (nested parsing in w/ XCEU?)
- args keyword (or ...)
    - access to variable args from func args
- 1 >> f >> g -> g(f(1))
- parser
    - reject no assign stmts
        - defer
        - while
        - ?
    - reject anything after throw (last stmt)
    - reject yield with no direct enclosing task
- ceu2c
    - struct <- tuple
    - vec <- buf
- call w/o blocks optimize
- ranges
    - [1..2]
- traverse
    call fat (x=10) {
        if x == 1 {
            1
        } else {
            fat(x-1)
        }
    }

# IDEAS

- uv-ceu
    - example with read in parallel
    - pipe compose
- code NAV tree
- lessmilk
- 7 guis
- IUP + canvas
- doc pico-sdl/ceu
- incremental GC
    - is a coro itself (start from leaves, back to root)
- contracts
- android SDK
- modelo sincrono permite copiar memória em aplicações simétricos
    - Toda memória é gerenciada dict array task
- pico-sdl
    - image/font cache
- rx-ceu
    - Meier "dual" paper
